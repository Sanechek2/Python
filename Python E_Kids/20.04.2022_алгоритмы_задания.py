
# Алгоритмы
#
# 1.  Линейный поиск (Linear Search) ПРОЙДЕНО
#
# 2.  Двоичный поиск (Binary Search)
#
# 3.  Двоичные деревья (Binary Trees)
# 4.  Алгоритм поиска вглубь (DFS)
# 5.  Алгоритм поиска вширь (BFS)
# 6.  Алгоритм Хаффмана (Huffman Compression)
# 7.  Поиск подстроки (Substring Search)
# 8.  Сортировка пузырьковая (Bubble Sort)
# 9.  Сортировка выбором (Selection Sort)
# 10. Сортировка вставками (Insert Sort)
# 11. Coртировка слиянием (Merge Sort)





# 1. Класс Ученик (Student)
# Задача: создать класс Student
#
# Каждый ученик имеет свойства: name ("имя"), age ("возраст") и mark ("оценка")
# Нужно написать в классе комманду __init__ ("рождение")
# а также команду show ("покажись"), которая выпишет данные об ученике на экран
#
# После создания класса нужно создать нового ученика и вывести его данные на экран
#


class Student:
    
    def __init__( self, name, age, mark ):  
        
        self.name = name
        self.age = age
        self.mark = mark
    
    def show( self ):
        print( f'Привет! Я {self.name}, мне {self.age} лет, моя оценка: {self.mark}' )
        

new_student = Student( name='Вася', age=42, mark=2 )

# new_student.show()






# 2. Группа случайных учеников
#
# Задача: создать список из 10 случайных студентов
#
# Сначала создаём список возможных имён, 
# затем в цикле 10 раз создаём нового ученика со случайными данными
# (пригодится библиотека import random)
# 
# Пускай каждый новый студент выведет свои данные на экран и добавит себя
# в список group, который перед циклом мы сделаем пустым (group = [])
#

import random
names = ['Aня', 'Борис', 'Вася', 'Галя', 'Дима', 'Егор', 'Женя', 'Иван', 'Коля']
group = []

for i in range(10):
    
    new_name = random.choice( names )
    new_mark = random.randint( 1, 10 )
    new_age = random.randint( 11, 17 )
    
    new_student = Student( name=new_name, age=new_age, mark=new_mark )
    group.append( new_student )
    
    new_student.show()













# 3. Линейный поиск
#
# Задача: найти ученика у которого оценка 8 используя линейный поиск
#
# Можно использовать функцию с прошлого занятия, но её нужно будет немного поменять
# 
# Алгоритм:
# 1. найди длину списка
# 2. начни цикл для каждого элемента списка
# 3. найди очередного студента
# 4. сравни его оценку с искомой
# 5. если она равна, выпиши на экран следующее:
#
# print( f'Нашёлся {student.name} с оценкой {iskomaja} на позиции {i} (потребовалось шагов: {i+1})' )
#
# 6. закончи функцию командой return
# 7. если студента с такой оценкой не оказалось, выведи на экран следующее:
#
# print( f'Такую оценку никто не получил' )




def linejny( spisok, iskomaja ):
    
    print('Линейный поиск')
    
    N = len(spisok)
    for i in range(N):
        
        student = spisok[i]  # итый студент
        ocenka = student.mark
        if ocenka == iskomaja:
            print( f'Нашёлся {student.name} с оценкой {iskomaja} на позиции {i} (потребовалось шагов: {i+1})' )
            return
        
    print( f'Такую оценку никто не получил' )
        


linejny( spisok=group, iskomaja=8 )













# 4. Сортировка
# Задача: посортировать учеников по оценкам и вывести их данные на экран
#
# Использует встроенную в Python сортировку с помощю команды sort
# Как посортировать студентов по оценкам? Нужна функция how_to_sort
#
#

def how_to_sort( student ):
    return student.mark
    
group.sort( key=how_to_sort )

for student in group:
    student.show()





# 5. Задача: найти ученика у которого оценка 8
#    Исползуя двоичный поиск (новое)
#
#
# Алгоритм:
# 1. Найди длину всего списка
# 2. Создай указатели на первый и на последний элемент
# 3. Найди индекс элемента ровно между ними
# 4. Найди значение этого элемента
# 5. Сравни искомое число с этим средним элементом, округли до целого
# 6. Если искомое число больше, передвинь левый указатель
# 7. Если меньше, то передвинь правый
# 8. Если равно, значит искомое число найдено (выпиши на экран индекс)
# 9. Если вдруг два указателя равны, а число всё ещё не найдено,
#    значит его нет в списке
#

def dvoichny( spisok, iskomaja ):

    print('\nДвоичный поиск')
    
    N = len(spisok)
    i = 0
    j = N-1
    steps = 0
    
    while i < j:
        
        steps += 1
        m = (i+j)/2
        m = int(m)
        
        student = spisok[ m ]
        ocenka = student.mark
        
        if ocenka < iskomaja:
            i = m+1
        if ocenka > iskomaja:
            j = m
        if ocenka == iskomaja:
            print( f'Нашёлся {student.name} с оценкой {iskomaja} на позиции {m} (потребовалось шагов: {steps})' )
            return
        
    if i == j:
        print( f'Такую оценку никто не получил' )
    

dvoichny( spisok=group, iskomaja=8 )

